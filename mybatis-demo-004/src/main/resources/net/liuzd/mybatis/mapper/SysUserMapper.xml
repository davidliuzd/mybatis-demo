<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.liuzd.mybatis.mapper.SysUserMapper">

  <resultMap id="BaseResultMap" type="net.liuzd.mybatis.model.SysUser">    
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="user_password" jdbcType="VARCHAR" property="userPassword" />
    <result column="user_email" jdbcType="VARCHAR" property="userEmail" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="user_info" jdbcType="LONGVARCHAR" property="userInfo" />
    <result column="head_img" jdbcType="LONGVARBINARY" property="headImg" />
  </resultMap>
  
  <delete id="deleteByPrimaryKey">   
    delete from sys_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteBySysUser">
    DELETE FROM sys_user WHERE id = #{id}
</delete>
  
  <insert id="insert" parameterType="net.liuzd.mybatis.model.SysUser">   
    insert into sys_user (id, user_name, user_password, 
      user_email, create_time, user_info, 
      head_img)
    values (#{id,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR}, 
      #{userEmail,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{userInfo,jdbcType=LONGVARCHAR}, 
      #{headImg,jdbcType=LONGVARBINARY})
  </insert>
  
  <update id="updateByPrimaryKey" parameterType="net.liuzd.mybatis.model.SysUser">    
    update sys_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      user_email = #{userEmail,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      user_info = #{userInfo,jdbcType=LONGVARCHAR},
      head_img = #{headImg,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">   
    select id, user_name, user_password, user_email, create_time, user_info, head_img
    from sys_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap">    
    select id, user_name, user_password, user_email, create_time, user_info, head_img
    from sys_user
  </select>
  
  <!-- 写主键的方法只适用于支持主键自增的数据库 -->
  <insert id="insertUseGeneratedKeys" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
    VALUES (#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
</insert>

<!-- 
	数据库（比如Oracle）不提供主键自增的功能，而是使用序列得到一个值，然后将这个值赋给id，再将数据插入到数据库。
	对于这种情况，就可以采用selectKey方式，因为selectKey方式不仅适用于不提供主键自增功能的数据库，也适用于提供主键自增功能的数据库
	keyColumn：主键的数据库列名。
	resultType：返回值类型。
	keyProperty：主键对应的属性名。
	order：该属性的设置和使用的数据库有关，如果使用的是MySql数据库，设置的值是AFTER，因为当前记录的主键值在insert语句执行成功后才能获取到。
	如果使用的是Oracle数据库，设置的值是BEFORE，因为Oracle中需要先从序列获取值，然后将值作为主键插入到数据库中
 -->
<insert id="insertUseSelectKey">
    INSERT INTO sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
    VALUES (#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
    <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
        SELECT LAST_INSERT_ID()
    </selectKey>
</insert>

<!-- 如果使用的是Oracle数据库，设置的值是BEFORE，因为Oracle中需要先从序列获取值，然后将值作为主键插入到数据库中 -->
<insert id="insertOracleUseSelectKey">
    <selectKey keyColumn="id" resultType="long" keyProperty="id" order="BEFORE">
        SELECT SEQ_ID.nextval from dual
    </selectKey>
    INSERT INTO sys_user(id,user_name, user_password, user_email, user_info, head_img, create_time)
    VALUES (#{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
</insert>
  
</mapper>